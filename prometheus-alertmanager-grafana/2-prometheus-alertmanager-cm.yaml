apiVersion: v1
kind: ConfigMap
metadata:
  name: alert-config
  namespace: kube-ops
data:
  config.yml: |-
    global:
      resolve_timeout: 5m # 在没有报警的情况下声明为已解决的时间
      smtp_smarthost: 'smtp.qq.com:587' # 配置邮件发送信息
      smtp_from: '360205404@qq.com'
      smtp_auth_username: '360205404@qq.com'
      smtp_auth_password: 'xxx' #改成自己的密码
      smtp_hello: 'qq.com'
      smtp_require_tls: false
    route: # 所有报警信息进入后的根路由，用来设置报警的分发策略
      group_by: ['alertname', 'cluster'] # 这里的标签列表是接收到报警信息后的重新分组标签，例如，接收到的报警信息里面有许多具有 cluster=A 和 alertname=LatncyHigh 这样的标签的报警信息将会批量被聚合到一个分组里面
      group_wait: 30s # 当一个新的报警分组被创建后，需要等待至少group_wait时间来初始化通知，这种方式可以确保您能有足够的时间为同一分组来获取多个警报，然后一起触发这个报警信息。
      repeat_interval: 5m # 如果一个报警信息已经发送成功了，等待'repeat_interval'时间来重新发送他们
      receiver: default # 默认的receiver：如果一个报警没有被一个route匹配，则发送给默认的接收器
      routes: # 上面所有的属性都由所有子路由继承，并且可以在每个子路由上进行覆盖。
      - receiver: email
        group_wait: 10s
        match:
          team: node
    receivers:
    - name: 'default'
      email_configs:
      - to: 'chenjt_java@163.com'
        send_resolved: true
    - name: 'email'
      email_configs:
      - to: '360205404@qq.com'
        send_resolved: true
